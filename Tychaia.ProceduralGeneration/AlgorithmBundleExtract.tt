<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// This source code is licensed in accordance with the licensing outlined
// on the main Tychaia website (www.tychaia.com).  Changes to the
// license on the website apply retroactively.
//
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.Serialization;
using Tychaia.ProceduralGeneration.Biomes;
using Tychaia.ProceduralGeneration.FlowBundles;

namespace Tychaia.ProceduralGeneration
{
<#
	var types = new[]
	{
		"Int32",
		"Biome"
	};

	foreach (var type in types)
	{
#>
    [DataContract]
    [FlowDesignerMajorCategory(FlowMajorCategory.General)]
    [FlowDesignerCategory(FlowCategory.FlowBundle)]
    [FlowDesignerName("Bundle Extract <#=type#>")]
    public class AlgorithmBundleExtract<#=type#> : Algorithm<FlowBundle, <#=type#>>
    {
        [DataMember]
        [DefaultValue("Unassigned")]
        [Description("The identifier for the instance you wish to retrieve from the bundle.")]
        public string Identifier
        {
            get;
            set;
        }

        [DataMember]
        [DefaultValue(true)]
        [Description("Show this layer as 2D in the editor.")]
        public bool Layer2D
        {
            get;
            set;
        }

        public override string[] InputNames
        {
            get
            {
                return new[] { "FlowBundle" };
            }
        }

        public override bool Is2DOnly
        {
            get { return this.Layer2D; }
        }

        public AlgorithmBundleExtract<#=type#>()
        {
            this.Layer2D = true;
            this.Identifier = "Unassigned";
        }

        public override void ProcessCell(IRuntimeContext context, FlowBundle[] input, <#=type#>[] output, long x, long y, long z, int i, int j, int k, int width, int height, int depth, int ox, int oy, int oz)
        {
             output[(i + ox) + (j + oy)*width + (k + oz)*width*height] = input[(i + ox) + (j + oy) * width + (k + oz) * width * height].ExtractValue(Identifier);
        }

        public override Color GetColorForValue(StorageLayer parent, dynamic value)
        {
			if (value == null)
			{
				return Color.Red;
			}

            return this.DelegateColorForValueToParent(parent, value);
        }
    }

<#
	}
#>
}