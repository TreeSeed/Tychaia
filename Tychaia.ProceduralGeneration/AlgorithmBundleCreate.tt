<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// This source code is licensed in accordance with the licensing outlined
// on the main Tychaia website (www.tychaia.com).  Changes to the
// license on the website apply retroactively.
//
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.Serialization;
using Tychaia.ProceduralGeneration.Biomes;
using Tychaia.ProceduralGeneration.FlowBundles;
using Tychaia.ProceduralGeneration.Blocks;

namespace Tychaia.ProceduralGeneration
{
<#
	var types = new[]
	{
		"Int32",
		"Biome",
		"BlockInfo"
	};

	foreach (var type in types)
	{
#>
    [DataContract]
    [FlowDesignerMajorCategory(FlowMajorCategory.FlowBundle)]
    [FlowDesignerCategory(FlowCategory.Initials)]
    [FlowDesignerName("Bundle from <#=type#>")]
    public class AlgorithmBundleCreate<#=type#> : Algorithm<<#=type#>, FlowBundle>
    {
		[DataMember]
        [DefaultValue(4)]
        [Description("The maximum amount of data stored within the bundle.")]
        public int BundleSize
        {
            get;
            set;
        }

        [DataMember]
        [DefaultValue("Unassigned <#=type#>")]
        [Description("The identifier for this instance in the bundle.")]
        public string Identifier
        {
            get;
            set;
        }

        [DataMember]
        [DefaultValue(true)]
        [Description("Show this layer as 2D in the editor.")]
        public bool Layer2D
        {
            get;
            set;
        }

        public override string[] InputNames
        {
            get
            {
                return new[] { "<#=type#>" };
            }
        }

        public override bool Is2DOnly
        {
            get { return this.Layer2D; }
        }

        public AlgorithmBundleCreate<#=type#>()
        {
            this.Layer2D = true;
            this.Identifier = "Unassigned";
			this.BundleSize = 4;
        }

        public override void ProcessCell(IRuntimeContext context, <#=type#>[] input, FlowBundle[] output, long x, long y, long z, int i, int j, int k, int width, int height, int depth, int ox, int oy, int oz)
        {
			var bundle = new FlowBundle();
			var result = bundle.Set(this.Identifier, input[(i + ox) + (j + oy) * width + (k + oz) * width * height]);
			output[(i + ox) + (j + oy) * width + (k + oz) * width * height] = result;
        }

        public override Color GetColorForValue(StorageLayer parent, dynamic value)
        {
            return Color.FromArgb(value.Hash());
        }
    }

<#
	}
#>
}