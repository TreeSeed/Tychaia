function calculateNumberFromInput(input) {
    var i = 0;
    for (var a = 0; a < input.length; a += 1) {
        i += (a * a * a) * input.charCodeAt(a);
    }
    return i;
}
function returnNumberOrHash(input) {
    if (isNaN(input) == true) {
        return calculateNumberFromInput(input);
    } else {
        return input;
    }
}
function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
    if (typeof stroke == "undefined") {
        stroke = true;
    }
    if (typeof radius === "undefined") {
        radius = 5;
    }
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    if (stroke) {
        ctx.stroke();
    }
    if (fill) {
        ctx.fill();
    }
}
function renderWatermark(canvas, seed) {
    var textStart = "Generated by Make Me A World (makemeaworld.com).  Powered by Tychaia (tychaia.com).  Seed is ";
    var textItalic = "" + seed;
    var textEnd = ".";
    var ctx = canvas.getContext("2d");

    // Define text measure.
    function measureText() {
        ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
        ctx.textAlign = "left";
        ctx.textBaseline = "top";
        var startSize = ctx.measureText(textStart);
        ctx.font = 'italic 14px Calibri, Tahoma, Verdana, sans-serif';
        var italicSize = ctx.measureText(textItalic);
        ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
        var endSize = ctx.measureText(textItalic);
        return startSize.width + italicSize.width + endSize.width;
    }

    // Define text render.
    function drawText(x, y) {
        // Draw start.
        ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
        ctx.textAlign = "left";
        ctx.textBaseline = "top";
        ctx.fillText(textStart, x, y);
        var startSize = ctx.measureText(textStart);

        // Draw seed in italics.
        ctx.font = 'italic 14px Calibri, Tahoma, Verdana, sans-serif';
        ctx.fillText(textItalic, x + startSize.width, y);
        var italicSize = ctx.measureText(textItalic);

        // Draw end.
        ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
        ctx.fillText(textEnd, x + startSize.width + italicSize.width, y);
    }

    // Draw rounded rectangle.
    ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
    roundRect(ctx, 10, 10, measureText() - 10, 21, 5, true, false);

    // Draw drop shadows.
    ctx.fillStyle = "#000";
    drawText(13, 13);
    drawText(14, 13);
    drawText(15, 13);
    drawText(13, 12);
    drawText(15, 12);
    drawText(13, 11);
    drawText(14, 11);
    drawText(15, 11);

    // Draw actual text.
    ctx.fillStyle = "#FFF";
    drawText(14, 12);
}
var seed = 0;
$(document).ready(function () {
    if (window.location.hash != "") {
        $("#seedSet")[0].value = window.location.hash.substring(1);
    } else {
        $("#seedSet")[0].value = Math.random().toString() * 0xFFFFFFFFFFFFFF;
    }
    $("#seed").text($("#seedSet")[0].value);
    seed = returnNumberOrHash($("#seedSet")[0].value);
    $("#seedSet").change(function () {
        $("#seed").text($("#seedSet")[0].value);
        seed = returnNumberOrHash($("#seedSet")[0].value);
        window.location.hash = $("#seed").text();
    });
    $("#randomize").click(function () {
        $("#seedSet")[0].value = Math.random().toString() * 0xFFFFFFFFFFFFFF;
        $("#seed").text($("#seedSet")[0].value);
        seed = returnNumberOrHash($("#seedSet")[0].value);
        window.location.hash = $("#seed").text();
    });
    $("#seedSet").focus();
    $("#seedSet").select();

    var stopEarly = false;
    $("#stopEarly").click(function () {
        stopEarly = true;
    });

    $("#downloadResult").click(function () {
        window.open($("#canvas")[0].toDataURL("image/png"), "imageDownload");
    });
    $("#renderAnother").click(function () {
        gotoStage("main");
        $("#seedSet").focus();
        $("#seedSet").select();
    });
    $("#shareOnTwitter").click(function () {
        var popupwindow = function (url, title, w, h) {
            var left = (screen.width / 2) - (w / 2);
            var top = (screen.height / 2) - (h / 2);
            return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
        }
        popupwindow("https://twitter.com/intent/tweet?hashtags=Tychaia&related=hachque&text=I%20just%20made%20a%20world%20with%20Tychaia!&tw_p=tweetbutton&url=" + escape("http://makemeaworld.com/#" + $("#seed").text()),
            "tweet", 500, 350);
    });

    var currentStage = null;
    var gotoStage = function (stage) {
        currentStage = stage;
        $("#welcomeMessage")[0].style.top = "100px";
        if (stage == "main") {
            $("#header").show();
            $("#welcomeMessage").show();
            $("#progress").hide();
            $("#remainingHolder").hide();
            $("#info").hide();
            $("#end").hide();
            $("#watermark").show();
            $("#newRender").show();
        } else if (stage == "processing") {
            $("#header").show();
            $("#welcomeMessage").hide();
            $("#progress").show();
            $("#remainingHolder").show();
            $("#info").show();
            $("#end").hide();
            $("#watermark").show();
        } else if (stage == "mainAndProcessing") {
            $("#header").show();
            $("#welcomeMessage").show();
            $("#progress").show();
            $("#remainingHolder").show();
            $("#info").show();
            $("#end").hide();
            $("#watermark").show();
            $("#welcomeMessage")[0].style.top = "350px";
            $("#newRender").hide();
        } else if (stage == "results") {
            $("#header").show();
            $("#welcomeMessage").hide();
            $("#progress").hide();
            $("#remainingHolder").hide();
            $("#info").hide();
            $("#end").show();
            $("#watermark").hide();
            $("#renderAnother").show();
        } else if (stage == "mainAndResults") {
            $("#header").show();
            $("#welcomeMessage").show();
            $("#progress").hide();
            $("#remainingHolder").hide();
            $("#info").hide();
            $("#end").show();
            $("#watermark").hide();
            $("#renderAnother").hide();
            $("#welcomeMessage")[0].style.top = "250px";
            $("#newRender").show();
        }
    }

    $("#loadButton").click(function () {
        gotoStage("processing");

        var canvas = $("#canvas")[0];
        var ctx = canvas.getContext('2d');
        var SIZE = 64;
        var start = new Date().getTime();
        ctx.clearRect(0, 0, $("#canvas")[0].width, $("#canvas")[0].height);

        var x = -canvas.width;
        var y = -canvas.height;
        var z = -SIZE;
        var total = ((canvas.width * 2) / SIZE) * ((canvas.height * 2) / SIZE) * 5;
        var current = 0;
        var rendered = 0;
        var skipped = 0;

        var getCallback = function (canvas, ctx, x, y, z, call) {
            return function () {
                var rcx = 32 / 2 + canvas.width / 2 - SIZE;
                var rcy = 32 / 2; // -15 - 32 + canvas.height / 2;
                var rx = rcx + ((x / 32 - y / 32) / 2.0 * 64);
                var ry = rcy + (x / 32 + y / 32) * 32 - (z / 32 - 0) * 32;
                if (rx < (-SIZE * 3) || rx > canvas.width || ry < (-SIZE * 3) || ry > canvas.height) {
                    skipped += 1;
                    call();
                    return;
                }
                var img = new Image();
                img.onload = function () {
                    if (img.width == 1 && img.height == 1) {
                        skipped += 1;
                        call();
                    } else {
                        rendered += 1;
                        ctx.drawImage(img, rx, ry);
                        call();
                    }
                }
                img.src = "images/map.png?x=" + x + "&y=" + y + "&z=" + z + "&size=" + SIZE + "&seed=" + seed;
            };
        }

        var zeroFill = function (number, width) {
            width -= number.toString().length;
            if (width > 0) {
                return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
            }
            return number + ""; // always return a string
        }

        var finalize = function () {
            renderWatermark(canvas, $("#seed").text());
        }

        var run = function () {
            if (stopEarly) {
                if (currentStage == "mainAndProcessing")
                    gotoStage("mainAndResults");
                else
                    gotoStage("results");
                $("#endMessage").text("Rendering was stopped manually.");
                stopEarly = false;
                finalize();
                return;
            }
            x += SIZE;
            if (x > canvas.width) {
                x = -canvas.height;
                y += SIZE;
            }
            if (y > canvas.height) {
                x = -canvas.width;
                y = -canvas.height;
                z += SIZE;
            }
            if (z > SIZE * 4) {
                if (currentStage == "mainAndProcessing")
                    gotoStage("mainAndResults");
                else
                    gotoStage("results");
                $("#endMessage").text("Rendering completed successfully.");
                finalize();
                return;
            }
            var penalty = 0;
            var millisCurrent = new Date().getTime();
            var millisDifference = millisCurrent - start;
            var estimatedMillisTotal = millisDifference * (total / current);
            var estimatedMillisRemaining = estimatedMillisTotal - millisDifference;
            if (estimatedMillisRemaining < 0) estimatedMillisRemaining = 0;
            var estimatedTimeRemaining = new Date(estimatedMillisRemaining);
            var estimatedTimeTotal = new Date(estimatedMillisTotal);
            var stringCurrent = new Date(millisDifference).getMinutes() + ":" + zeroFill(new Date(millisDifference).getSeconds(), 2);
            var stringRemaining = estimatedTimeRemaining.getMinutes() + ":" + zeroFill(estimatedTimeRemaining.getSeconds(), 2);
            var stringTotal = estimatedTimeTotal.getMinutes() + ":" + zeroFill(estimatedTimeTotal.getSeconds(), 2);
            $("#progress").html(((current / total) * 100).toFixed(4) + "% complete (" + (total - current) + " tiles remaining)<br />" + rendered + " rendered, " + skipped + " skipped");
            $("#timeRemaining").text("Completion in " + stringRemaining + " minutes.");
            current += 1;
            getCallback(canvas, ctx, x, y, z, run)();
        }
        run();
    });

    // If the window hash is not empty, simulate pressing the Generate World.
    if (window.location.hash != "") {
        $("#loadButton").click();
        gotoStage("mainAndProcessing");
    }
});

