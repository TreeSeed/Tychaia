"use strict";

/// <summary>
/// Useful rendering functions for Make Me a World.
/// </summary>
function MMAWRendering()
{
    /// <summary>
    /// Draws a rounded rectangle onto the specified canvas with the
    /// specified options.
    /// </summary>
    /// <param name="ctx">The rendering context of the canvas to render onto.</param>
    /// <param name="x">The X position to render at.</param>
    /// <param name="y">The Y position to render at.</param>
    /// <param name="width">The width of the rounded rectangle.</param>
    /// <param name="height">The height of the rounded rectangle.</param>
    /// <param name="radius">The radius of the rounded corners.</param>
    /// <param name="fill">Whether to render as a filled rounded rectangle.</param>
    /// <param name="stroke">Whether to render as an outline rounded rectangle.</param>
    this.roundRect = function(ctx, x, y, width, height, radius, fill, stroke) {
        if (typeof stroke == "undefined") {
            stroke = true;
        }
        if (typeof radius === "undefined") {
            radius = 5;
        }
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        if (stroke) {
            ctx.stroke();
        }
        if (fill) {
            ctx.fill();
        }
    };
    
    /// <summary>
    /// Draws a watermark onto the specified canvas.
    /// </summary>
    /// <param name="canvas">The canvas to render onto.</param>
    /// <param name="seed">The seed used to generate the world.</param>
    this.renderWatermark = function(canvas, seed) {
        var textStart = "Generated by Make Me A World (makemeaworld.com).  Powered by Tychaia (tychaia.com).  Seed is ";
        var textItalic = "" + seed;
        var textEnd = ".";
        var ctx = canvas.getContext("2d");

        // Define text measure.
        function measureText() {
            ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
            ctx.textAlign = "left";
            ctx.textBaseline = "top";
            var startSize = ctx.measureText(textStart);
            ctx.font = 'italic 14px Calibri, Tahoma, Verdana, sans-serif';
            var italicSize = ctx.measureText(textItalic);
            ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
            var endSize = ctx.measureText(textItalic);
            return startSize.width + italicSize.width + endSize.width;
        }

        // Define text render.
        function drawText(x, y) {
            // Draw start.
            ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
            ctx.textAlign = "left";
            ctx.textBaseline = "top";
            ctx.fillText(textStart, x, y);
            var startSize = ctx.measureText(textStart);

            // Draw seed in italics.
            ctx.font = 'italic 14px Calibri, Tahoma, Verdana, sans-serif';
            ctx.fillText(textItalic, x + startSize.width, y);
            var italicSize = ctx.measureText(textItalic);

            // Draw end.
            ctx.font = '14px Calibri, Tahoma, Verdana, sans-serif';
            ctx.fillText(textEnd, x + startSize.width + italicSize.width, y);
        }

        // Draw rounded rectangle.
        ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
        this.roundRect(ctx, 10, canvas.height - 10 - 21, canvas.width - 20, 21, 5, true, false);

        // Draw drop shadows.
        var offset = 17;
        ctx.fillStyle = "#000";
        drawText(13, canvas.height - 13 - offset);
        drawText(14, canvas.height - 13 - offset);
        drawText(15, canvas.height - 13 - offset);
        drawText(13, canvas.height - 12 - offset);
        drawText(15, canvas.height - 12 - offset);
        drawText(13, canvas.height - 11 - offset);
        drawText(14, canvas.height - 11 - offset);
        drawText(15, canvas.height - 11 - offset);

        // Draw actual text.
        ctx.fillStyle = "#FFF";
        drawText(14, canvas.height - 12 - offset);
    };
};
